//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class DeviceTypeClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getDevicesPaginated(pageIndex: number | undefined, pageSize: number | undefined): Observable<ServicePaginatedResultOfDeviceType> {
        let url_ = this.baseUrl + "/api/DeviceType/GetDevicesPaginated?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetDevicesPaginated(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetDevicesPaginated(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfDeviceType>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfDeviceType>;
        }));
    }

    protected processGetDevicesPaginated(response: HttpResponseBase): Observable<ServicePaginatedResultOfDeviceType> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfDeviceType.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addDeviceType(number: string | null | undefined, name: string | null | undefined, notation: string | null | undefined): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/DeviceType/AddDeviceType";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (number !== null && number !== undefined)
            content_.append("Number", number.toString());
        if (name !== null && name !== undefined)
            content_.append("Name", name.toString());
        if (notation !== null && notation !== undefined)
            content_.append("Notation", notation.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddDeviceType(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddDeviceType(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processAddDeviceType(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class InitialVerificationJobsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getJobs(pageIndex: number | undefined, pageSize: number | undefined): Observable<ServicePaginatedResultOfInitialVerificationJob> {
        let url_ = this.baseUrl + "/api/InitialVerificationJobs/GetJobs?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJobs(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJobs(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfInitialVerificationJob>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfInitialVerificationJob>;
        }));
    }

    protected processGetJobs(response: HttpResponseBase): Observable<ServicePaginatedResultOfInitialVerificationJob> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfInitialVerificationJob.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addJob(year: number | undefined, month: number | undefined): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/InitialVerificationJobs/AddJob";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (year === null || year === undefined)
            throw new Error("The parameter 'year' cannot be null.");
        else
            content_.append("Year", year.toString());
        if (month === null || month === undefined)
            throw new Error("The parameter 'month' cannot be null.");
        else
            content_.append("Month", month.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddJob(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddJob(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processAddJob(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteJob(id: string | undefined): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/InitialVerificationJobs/DeleteJob?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteJob(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteJob(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processDeleteJob(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class InitialVerificationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getVerifications(pageIndex: number | undefined, pageSize: number | undefined, verificationYearMonth: string | null | undefined): Observable<ServicePaginatedResultOfInitialVerificationDto> {
        let url_ = this.baseUrl + "/api/InitialVerifications/GetVerifications?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (verificationYearMonth !== undefined && verificationYearMonth !== null)
            url_ += "VerificationYearMonth=" + encodeURIComponent("" + verificationYearMonth) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVerifications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVerifications(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfInitialVerificationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfInitialVerificationDto>;
        }));
    }

    protected processGetVerifications(response: HttpResponseBase): Observable<ServicePaginatedResultOfInitialVerificationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfInitialVerificationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class PendingManometrVerificationsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    acceptExcelVerifications(file: FileParameter | null | undefined, sheetName: string | null | undefined, dataRange: string | null | undefined, deviceLocation: string | null | undefined): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/PendingManometrVerifications/AcceptExcelVerifications";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");
        if (sheetName !== null && sheetName !== undefined)
            content_.append("SheetName", sheetName.toString());
        if (dataRange !== null && dataRange !== undefined)
            content_.append("DataRange", dataRange.toString());
        if (deviceLocation !== null && deviceLocation !== undefined)
            content_.append("DeviceLocation", deviceLocation.toString());

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAcceptExcelVerifications(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAcceptExcelVerifications(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processAcceptExcelVerifications(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPandingVerificationsPaginated(pageIndex: number | undefined, pageSize: number | undefined): Observable<ServicePaginatedResultOfPendingManometrVerification> {
        let url_ = this.baseUrl + "/api/PendingManometrVerifications/GetPandingVerificationsPaginated?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPandingVerificationsPaginated(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPandingVerificationsPaginated(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfPendingManometrVerification>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfPendingManometrVerification>;
        }));
    }

    protected processGetPandingVerificationsPaginated(response: HttpResponseBase): Observable<ServicePaginatedResultOfPendingManometrVerification> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfPendingManometrVerification.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class ProtocolTemplateClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getTemplates(pageIndex: number | undefined, pageSize: number | undefined): Observable<ServicePaginatedResultOfProtocolTemplateDTO> {
        let url_ = this.baseUrl + "/api/ProtocolTemplate/GetTemplates?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTemplates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfProtocolTemplateDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfProtocolTemplateDTO>;
        }));
    }

    protected processGetTemplates(response: HttpResponseBase): Observable<ServicePaginatedResultOfProtocolTemplateDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfProtocolTemplateDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addTemplate(request: AddProtocolTemplateRequest): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/ProtocolTemplate/AddTemplate";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(request);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processAddTemplate(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPossibleTemplates(pageIndex: number | undefined, pageSize: number | undefined): Observable<ServicePaginatedResultOfPossibleProtocolTemplateResultDTO> {
        let url_ = this.baseUrl + "/api/ProtocolTemplate/GetPossibleTemplates?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPossibleTemplates(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPossibleTemplates(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfPossibleProtocolTemplateResultDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfPossibleProtocolTemplateResultDTO>;
        }));
    }

    protected processGetPossibleTemplates(response: HttpResponseBase): Observable<ServicePaginatedResultOfPossibleProtocolTemplateResultDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfPossibleProtocolTemplateResultDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteTemplate(id: number | undefined): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/ProtocolTemplate/DeleteTemplate?";
        if (id === null)
            throw new Error("The parameter 'id' cannot be null.");
        else if (id !== undefined)
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteTemplate(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteTemplate(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processDeleteTemplate(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class VerificationMethodsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getVerificationMethods(pageIndex: number | undefined, pageSize: number | undefined): Observable<ServicePaginatedResultOfVerificationMethodDTO> {
        let url_ = this.baseUrl + "/api/VerificationMethods/GetVerificationMethods?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetVerificationMethods(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetVerificationMethods(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfVerificationMethodDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfVerificationMethodDTO>;
        }));
    }

    protected processGetVerificationMethods(response: HttpResponseBase): Observable<ServicePaginatedResultOfVerificationMethodDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfVerificationMethodDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getPossibleVerificationMethods(pageIndex: number | undefined, pageSize: number | undefined, verificationNameFilter: string | null | undefined, deviceTypeInfoFilter: string | null | undefined, yearMonthFilter: string | null | undefined): Observable<ServicePaginatedResultOfPossibleVerificationMethodDTO> {
        let url_ = this.baseUrl + "/api/VerificationMethods/GetPossibleVerificationMethods?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (verificationNameFilter !== undefined && verificationNameFilter !== null)
            url_ += "VerificationNameFilter=" + encodeURIComponent("" + verificationNameFilter) + "&";
        if (deviceTypeInfoFilter !== undefined && deviceTypeInfoFilter !== null)
            url_ += "DeviceTypeInfoFilter=" + encodeURIComponent("" + deviceTypeInfoFilter) + "&";
        if (yearMonthFilter !== undefined && yearMonthFilter !== null)
            url_ += "YearMonthFilter=" + encodeURIComponent("" + yearMonthFilter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPossibleVerificationMethods(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPossibleVerificationMethods(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServicePaginatedResultOfPossibleVerificationMethodDTO>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServicePaginatedResultOfPossibleVerificationMethodDTO>;
        }));
    }

    protected processGetPossibleVerificationMethods(response: HttpResponseBase): Observable<ServicePaginatedResultOfPossibleVerificationMethodDTO> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServicePaginatedResultOfPossibleVerificationMethodDTO.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    downloadFile(fileId: string | undefined): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/VerificationMethods/DownloadFile?";
        if (fileId === null)
            throw new Error("The parameter 'fileId' cannot be null.");
        else if (fileId !== undefined)
            url_ += "fileId=" + encodeURIComponent("" + fileId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDownloadFile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDownloadFile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processDownloadFile(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    addVerificationMethod(description: string | null | undefined, aliases: string[] | null | undefined, fileName: string | null | undefined, file: FileParameter | null | undefined): Observable<ServiceResult> {
        let url_ = this.baseUrl + "/api/VerificationMethods/AddVerificationMethod";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (description !== null && description !== undefined)
            content_.append("Description", description.toString());
        if (aliases !== null && aliases !== undefined)
            aliases.forEach(item_ => content_.append("Aliases", item_.toString()));
        if (fileName !== null && fileName !== undefined)
            content_.append("FileName", fileName.toString());
        if (file !== null && file !== undefined)
            content_.append("File", file.data, file.fileName ? file.fileName : "File");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processAddVerificationMethod(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processAddVerificationMethod(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ServiceResult>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ServiceResult>;
        }));
    }

    protected processAddVerificationMethod(response: HttpResponseBase): Observable<ServiceResult> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ServiceResult.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ServicePaginatedResultOfDeviceType implements IServicePaginatedResultOfDeviceType {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfDeviceType | undefined;

    constructor(data?: IServicePaginatedResultOfDeviceType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfDeviceType.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfDeviceType {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfDeviceType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfDeviceType {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfDeviceType | undefined;
}

export class PaginatedListOfDeviceType implements IPaginatedListOfDeviceType {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: DeviceType[];

    constructor(data?: IPaginatedListOfDeviceType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(DeviceType.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfDeviceType {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfDeviceType();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfDeviceType {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: DeviceType[];
}

export abstract class DatabaseEntity implements IDatabaseEntity {
    id?: string;

    constructor(data?: IDatabaseEntity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): DatabaseEntity {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'DatabaseEntity' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface IDatabaseEntity {
    id?: string;
}

export class DeviceType extends DatabaseEntity implements IDeviceType {
    number?: string;
    title?: string;
    notation?: string;

    constructor(data?: IDeviceType) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.number = _data["number"];
            this.title = _data["title"];
            this.notation = _data["notation"];
        }
    }

    static override fromJS(data: any): DeviceType {
        data = typeof data === 'object' ? data : {};
        let result = new DeviceType();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["number"] = this.number;
        data["title"] = this.title;
        data["notation"] = this.notation;
        super.toJSON(data);
        return data;
    }
}

export interface IDeviceType extends IDatabaseEntity {
    number?: string;
    title?: string;
    notation?: string;
}

export class ServiceResult implements IServiceResult {
    message?: string | undefined;
    error?: string | undefined;

    constructor(data?: IServiceResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
        }
    }

    static fromJS(data: any): ServiceResult {
        data = typeof data === 'object' ? data : {};
        let result = new ServiceResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        return data;
    }
}

export interface IServiceResult {
    message?: string | undefined;
    error?: string | undefined;
}

export class ServicePaginatedResultOfInitialVerificationJob implements IServicePaginatedResultOfInitialVerificationJob {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfInitialVerificationJob | undefined;

    constructor(data?: IServicePaginatedResultOfInitialVerificationJob) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfInitialVerificationJob.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfInitialVerificationJob {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfInitialVerificationJob();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfInitialVerificationJob {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfInitialVerificationJob | undefined;
}

export class PaginatedListOfInitialVerificationJob implements IPaginatedListOfInitialVerificationJob {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: InitialVerificationJob[];

    constructor(data?: IPaginatedListOfInitialVerificationJob) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(InitialVerificationJob.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfInitialVerificationJob {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfInitialVerificationJob();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfInitialVerificationJob {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: InitialVerificationJob[];
}

export class InitialVerificationJob extends DatabaseEntity implements IInitialVerificationJob {
    date?: YearMonth;

    constructor(data?: IInitialVerificationJob) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.date = _data["date"] ? YearMonth.fromJS(_data["date"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): InitialVerificationJob {
        data = typeof data === 'object' ? data : {};
        let result = new InitialVerificationJob();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IInitialVerificationJob extends IDatabaseEntity {
    date?: YearMonth;
}

export class YearMonth implements IYearMonth {
    year?: number;
    month?: number;

    constructor(data?: IYearMonth) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.year = _data["year"];
            this.month = _data["month"];
        }
    }

    static fromJS(data: any): YearMonth {
        data = typeof data === 'object' ? data : {};
        let result = new YearMonth();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["year"] = this.year;
        data["month"] = this.month;
        return data;
    }
}

export interface IYearMonth {
    year?: number;
    month?: number;
}

export class ServicePaginatedResultOfInitialVerificationDto implements IServicePaginatedResultOfInitialVerificationDto {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfInitialVerificationDto | undefined;

    constructor(data?: IServicePaginatedResultOfInitialVerificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfInitialVerificationDto.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfInitialVerificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfInitialVerificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfInitialVerificationDto {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfInitialVerificationDto | undefined;
}

export class PaginatedListOfInitialVerificationDto implements IPaginatedListOfInitialVerificationDto {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: InitialVerificationDto[];

    constructor(data?: IPaginatedListOfInitialVerificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(InitialVerificationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfInitialVerificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfInitialVerificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfInitialVerificationDto {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: InitialVerificationDto[];
}

export class InitialVerificationDto implements IInitialVerificationDto {
    deviceTypeNumber?: string;
    deviceSerial?: string;
    verificationDate?: Date;
    deviceTypeInfo?: string;
    verifiedUntilDate?: Date;
    verificationTypeNames?: string[];
    owner?: string;
    etalons?: string[];
    id?: string;
    additionalInfo?: string | undefined;

    constructor(data?: IInitialVerificationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceTypeNumber = _data["deviceTypeNumber"];
            this.deviceSerial = _data["deviceSerial"];
            this.verificationDate = _data["verificationDate"] ? new Date(_data["verificationDate"].toString()) : <any>undefined;
            this.deviceTypeInfo = _data["deviceTypeInfo"];
            this.verifiedUntilDate = _data["verifiedUntilDate"] ? new Date(_data["verifiedUntilDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["verificationTypeNames"])) {
                this.verificationTypeNames = [] as any;
                for (let item of _data["verificationTypeNames"])
                    this.verificationTypeNames!.push(item);
            }
            this.owner = _data["owner"];
            if (Array.isArray(_data["etalons"])) {
                this.etalons = [] as any;
                for (let item of _data["etalons"])
                    this.etalons!.push(item);
            }
            this.id = _data["id"];
            this.additionalInfo = _data["additionalInfo"];
        }
    }

    static fromJS(data: any): InitialVerificationDto {
        data = typeof data === 'object' ? data : {};
        let result = new InitialVerificationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceTypeNumber"] = this.deviceTypeNumber;
        data["deviceSerial"] = this.deviceSerial;
        data["verificationDate"] = this.verificationDate ? formatDate(this.verificationDate) : <any>undefined;
        data["deviceTypeInfo"] = this.deviceTypeInfo;
        data["verifiedUntilDate"] = this.verifiedUntilDate ? formatDate(this.verifiedUntilDate) : <any>undefined;
        if (Array.isArray(this.verificationTypeNames)) {
            data["verificationTypeNames"] = [];
            for (let item of this.verificationTypeNames)
                data["verificationTypeNames"].push(item);
        }
        data["owner"] = this.owner;
        if (Array.isArray(this.etalons)) {
            data["etalons"] = [];
            for (let item of this.etalons)
                data["etalons"].push(item);
        }
        data["id"] = this.id;
        data["additionalInfo"] = this.additionalInfo;
        return data;
    }
}

export interface IInitialVerificationDto {
    deviceTypeNumber?: string;
    deviceSerial?: string;
    verificationDate?: Date;
    deviceTypeInfo?: string;
    verifiedUntilDate?: Date;
    verificationTypeNames?: string[];
    owner?: string;
    etalons?: string[];
    id?: string;
    additionalInfo?: string | undefined;
}

export class ServicePaginatedResultOfPendingManometrVerification implements IServicePaginatedResultOfPendingManometrVerification {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfPendingManometrVerification | undefined;

    constructor(data?: IServicePaginatedResultOfPendingManometrVerification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfPendingManometrVerification.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfPendingManometrVerification {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfPendingManometrVerification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfPendingManometrVerification {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfPendingManometrVerification | undefined;
}

export class PaginatedListOfPendingManometrVerification implements IPaginatedListOfPendingManometrVerification {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: PendingManometrVerification[];

    constructor(data?: IPaginatedListOfPendingManometrVerification) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PendingManometrVerification.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfPendingManometrVerification {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPendingManometrVerification();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfPendingManometrVerification {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: PendingManometrVerification[];
}

export class PendingManometrVerification extends DatabaseEntity implements IPendingManometrVerification {
    deviceTypeNumber?: string;
    deviceSerial?: string;
    date?: Date;
    verificationMethods?: string[];
    etalonsNumbers?: string[];
    ownerName?: string;
    workerName?: string;
    temperature?: number;
    pressure?: string;
    hummidity?: number;
    accuracy?: number | undefined;
    location?: DeviceLocation;

    constructor(data?: IPendingManometrVerification) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.deviceTypeNumber = _data["deviceTypeNumber"];
            this.deviceSerial = _data["deviceSerial"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            if (Array.isArray(_data["verificationMethods"])) {
                this.verificationMethods = [] as any;
                for (let item of _data["verificationMethods"])
                    this.verificationMethods!.push(item);
            }
            if (Array.isArray(_data["etalonsNumbers"])) {
                this.etalonsNumbers = [] as any;
                for (let item of _data["etalonsNumbers"])
                    this.etalonsNumbers!.push(item);
            }
            this.ownerName = _data["ownerName"];
            this.workerName = _data["workerName"];
            this.temperature = _data["temperature"];
            this.pressure = _data["pressure"];
            this.hummidity = _data["hummidity"];
            this.accuracy = _data["accuracy"];
            this.location = _data["location"];
        }
    }

    static override fromJS(data: any): PendingManometrVerification {
        data = typeof data === 'object' ? data : {};
        let result = new PendingManometrVerification();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceTypeNumber"] = this.deviceTypeNumber;
        data["deviceSerial"] = this.deviceSerial;
        data["date"] = this.date ? formatDate(this.date) : <any>undefined;
        if (Array.isArray(this.verificationMethods)) {
            data["verificationMethods"] = [];
            for (let item of this.verificationMethods)
                data["verificationMethods"].push(item);
        }
        if (Array.isArray(this.etalonsNumbers)) {
            data["etalonsNumbers"] = [];
            for (let item of this.etalonsNumbers)
                data["etalonsNumbers"].push(item);
        }
        data["ownerName"] = this.ownerName;
        data["workerName"] = this.workerName;
        data["temperature"] = this.temperature;
        data["pressure"] = this.pressure;
        data["hummidity"] = this.hummidity;
        data["accuracy"] = this.accuracy;
        data["location"] = this.location;
        super.toJSON(data);
        return data;
    }
}

export interface IPendingManometrVerification extends IDatabaseEntity {
    deviceTypeNumber?: string;
    deviceSerial?: string;
    date?: Date;
    verificationMethods?: string[];
    etalonsNumbers?: string[];
    ownerName?: string;
    workerName?: string;
    temperature?: number;
    pressure?: string;
    hummidity?: number;
    accuracy?: number | undefined;
    location?: DeviceLocation;
}

export enum DeviceLocation {
    АнтипинскийНПЗ = "АнтипинскийНПЗ",
    ГПНЯмал = "ГПНЯмал",
}

export class ServicePaginatedResultOfProtocolTemplateDTO implements IServicePaginatedResultOfProtocolTemplateDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfProtocolTemplateDTO | undefined;

    constructor(data?: IServicePaginatedResultOfProtocolTemplateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfProtocolTemplateDTO.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfProtocolTemplateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfProtocolTemplateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfProtocolTemplateDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfProtocolTemplateDTO | undefined;
}

export class PaginatedListOfProtocolTemplateDTO implements IPaginatedListOfProtocolTemplateDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: ProtocolTemplateDTO[];

    constructor(data?: IPaginatedListOfProtocolTemplateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(ProtocolTemplateDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfProtocolTemplateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfProtocolTemplateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfProtocolTemplateDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: ProtocolTemplateDTO[];
}

export class ProtocolTemplateDTO implements IProtocolTemplateDTO {
    id?: string;
    deviceTypeNumbers?: string[];
    group?: string;
    checkups?: { [key: string]: string; };
    values?: { [key: string]: any; };
    verificationMethods?: ProtocolVerificationMethodDTO[];

    constructor(data?: IProtocolTemplateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["deviceTypeNumbers"])) {
                this.deviceTypeNumbers = [] as any;
                for (let item of _data["deviceTypeNumbers"])
                    this.deviceTypeNumbers!.push(item);
            }
            this.group = _data["group"];
            if (_data["checkups"]) {
                this.checkups = {} as any;
                for (let key in _data["checkups"]) {
                    if (_data["checkups"].hasOwnProperty(key))
                        (<any>this.checkups)![key] = _data["checkups"][key];
                }
            }
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key];
                }
            }
            if (Array.isArray(_data["verificationMethods"])) {
                this.verificationMethods = [] as any;
                for (let item of _data["verificationMethods"])
                    this.verificationMethods!.push(ProtocolVerificationMethodDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProtocolTemplateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProtocolTemplateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.deviceTypeNumbers)) {
            data["deviceTypeNumbers"] = [];
            for (let item of this.deviceTypeNumbers)
                data["deviceTypeNumbers"].push(item);
        }
        data["group"] = this.group;
        if (this.checkups) {
            data["checkups"] = {};
            for (let key in this.checkups) {
                if (this.checkups.hasOwnProperty(key))
                    (<any>data["checkups"])[key] = (<any>this.checkups)[key];
            }
        }
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = (<any>this.values)[key];
            }
        }
        if (Array.isArray(this.verificationMethods)) {
            data["verificationMethods"] = [];
            for (let item of this.verificationMethods)
                data["verificationMethods"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IProtocolTemplateDTO {
    id?: string;
    deviceTypeNumbers?: string[];
    group?: string;
    checkups?: { [key: string]: string; };
    values?: { [key: string]: any; };
    verificationMethods?: ProtocolVerificationMethodDTO[];
}

export class ProtocolVerificationMethodDTO implements IProtocolVerificationMethodDTO {
    id?: string;
    description?: string;

    constructor(data?: IProtocolVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): ProtocolVerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ProtocolVerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        return data;
    }
}

export interface IProtocolVerificationMethodDTO {
    id?: string;
    description?: string;
}

export class AddProtocolTemplateRequest implements IAddProtocolTemplateRequest {
    deviceTypeNumber?: string;
    group?: string;
    checkups?: { [key: string]: string; };
    values?: { [key: string]: any; };
    verificationMethodsIds?: string[];

    constructor(data?: IAddProtocolTemplateRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceTypeNumber = _data["deviceTypeNumber"];
            this.group = _data["group"];
            if (_data["checkups"]) {
                this.checkups = {} as any;
                for (let key in _data["checkups"]) {
                    if (_data["checkups"].hasOwnProperty(key))
                        (<any>this.checkups)![key] = _data["checkups"][key];
                }
            }
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key];
                }
            }
            if (Array.isArray(_data["verificationMethodsIds"])) {
                this.verificationMethodsIds = [] as any;
                for (let item of _data["verificationMethodsIds"])
                    this.verificationMethodsIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AddProtocolTemplateRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddProtocolTemplateRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceTypeNumber"] = this.deviceTypeNumber;
        data["group"] = this.group;
        if (this.checkups) {
            data["checkups"] = {};
            for (let key in this.checkups) {
                if (this.checkups.hasOwnProperty(key))
                    (<any>data["checkups"])[key] = (<any>this.checkups)[key];
            }
        }
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = (<any>this.values)[key];
            }
        }
        if (Array.isArray(this.verificationMethodsIds)) {
            data["verificationMethodsIds"] = [];
            for (let item of this.verificationMethodsIds)
                data["verificationMethodsIds"].push(item);
        }
        return data;
    }
}

export interface IAddProtocolTemplateRequest {
    deviceTypeNumber?: string;
    group?: string;
    checkups?: { [key: string]: string; };
    values?: { [key: string]: any; };
    verificationMethodsIds?: string[];
}

export class ServicePaginatedResultOfPossibleProtocolTemplateResultDTO implements IServicePaginatedResultOfPossibleProtocolTemplateResultDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfPossibleProtocolTemplateResultDTO | undefined;

    constructor(data?: IServicePaginatedResultOfPossibleProtocolTemplateResultDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfPossibleProtocolTemplateResultDTO.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfPossibleProtocolTemplateResultDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfPossibleProtocolTemplateResultDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfPossibleProtocolTemplateResultDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfPossibleProtocolTemplateResultDTO | undefined;
}

export class PaginatedListOfPossibleProtocolTemplateResultDTO implements IPaginatedListOfPossibleProtocolTemplateResultDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: PossibleProtocolTemplateResultDTO[];

    constructor(data?: IPaginatedListOfPossibleProtocolTemplateResultDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PossibleProtocolTemplateResultDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfPossibleProtocolTemplateResultDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPossibleProtocolTemplateResultDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfPossibleProtocolTemplateResultDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: PossibleProtocolTemplateResultDTO[];
}

export class PossibleProtocolTemplateResultDTO implements IPossibleProtocolTemplateResultDTO {
    deviceTypeNumber?: string;
    verificationTypeNames?: string[];
    deviceTypeInfo?: string;
    verificationMethodIds?: string[];

    constructor(data?: IPossibleProtocolTemplateResultDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceTypeNumber = _data["deviceTypeNumber"];
            if (Array.isArray(_data["verificationTypeNames"])) {
                this.verificationTypeNames = [] as any;
                for (let item of _data["verificationTypeNames"])
                    this.verificationTypeNames!.push(item);
            }
            this.deviceTypeInfo = _data["deviceTypeInfo"];
            if (Array.isArray(_data["verificationMethodIds"])) {
                this.verificationMethodIds = [] as any;
                for (let item of _data["verificationMethodIds"])
                    this.verificationMethodIds!.push(item);
            }
        }
    }

    static fromJS(data: any): PossibleProtocolTemplateResultDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PossibleProtocolTemplateResultDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceTypeNumber"] = this.deviceTypeNumber;
        if (Array.isArray(this.verificationTypeNames)) {
            data["verificationTypeNames"] = [];
            for (let item of this.verificationTypeNames)
                data["verificationTypeNames"].push(item);
        }
        data["deviceTypeInfo"] = this.deviceTypeInfo;
        if (Array.isArray(this.verificationMethodIds)) {
            data["verificationMethodIds"] = [];
            for (let item of this.verificationMethodIds)
                data["verificationMethodIds"].push(item);
        }
        return data;
    }
}

export interface IPossibleProtocolTemplateResultDTO {
    deviceTypeNumber?: string;
    verificationTypeNames?: string[];
    deviceTypeInfo?: string;
    verificationMethodIds?: string[];
}

export class ServicePaginatedResultOfVerificationMethodDTO implements IServicePaginatedResultOfVerificationMethodDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfVerificationMethodDTO | undefined;

    constructor(data?: IServicePaginatedResultOfVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfVerificationMethodDTO.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfVerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfVerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfVerificationMethodDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfVerificationMethodDTO | undefined;
}

export class PaginatedListOfVerificationMethodDTO implements IPaginatedListOfVerificationMethodDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: VerificationMethodDTO[];

    constructor(data?: IPaginatedListOfVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(VerificationMethodDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfVerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfVerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfVerificationMethodDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: VerificationMethodDTO[];
}

export class VerificationMethodDTO implements IVerificationMethodDTO {
    id?: string;
    aliases?: string[];
    description?: string;
    fileName?: string;

    constructor(data?: IVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["aliases"])) {
                this.aliases = [] as any;
                for (let item of _data["aliases"])
                    this.aliases!.push(item);
            }
            this.description = _data["description"];
            this.fileName = _data["fileName"];
        }
    }

    static fromJS(data: any): VerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new VerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.aliases)) {
            data["aliases"] = [];
            for (let item of this.aliases)
                data["aliases"].push(item);
        }
        data["description"] = this.description;
        data["fileName"] = this.fileName;
        return data;
    }
}

export interface IVerificationMethodDTO {
    id?: string;
    aliases?: string[];
    description?: string;
    fileName?: string;
}

export class ServicePaginatedResultOfPossibleVerificationMethodDTO implements IServicePaginatedResultOfPossibleVerificationMethodDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfPossibleVerificationMethodDTO | undefined;

    constructor(data?: IServicePaginatedResultOfPossibleVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
            this.error = _data["error"];
            this.data = _data["data"] ? PaginatedListOfPossibleVerificationMethodDTO.fromJS(_data["data"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ServicePaginatedResultOfPossibleVerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new ServicePaginatedResultOfPossibleVerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        data["error"] = this.error;
        data["data"] = this.data ? this.data.toJSON() : <any>undefined;
        return data;
    }
}

export interface IServicePaginatedResultOfPossibleVerificationMethodDTO {
    message?: string | undefined;
    error?: string | undefined;
    data?: PaginatedListOfPossibleVerificationMethodDTO | undefined;
}

export class PaginatedListOfPossibleVerificationMethodDTO implements IPaginatedListOfPossibleVerificationMethodDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: PossibleVerificationMethodDTO[];

    constructor(data?: IPaginatedListOfPossibleVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.totalPages = _data["totalPages"];
            this.hasPreviousPage = _data["hasPreviousPage"];
            this.hasNextPage = _data["hasNextPage"];
            this.totalCount = _data["totalCount"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(PossibleVerificationMethodDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PaginatedListOfPossibleVerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PaginatedListOfPossibleVerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["totalPages"] = this.totalPages;
        data["hasPreviousPage"] = this.hasPreviousPage;
        data["hasNextPage"] = this.hasNextPage;
        data["totalCount"] = this.totalCount;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPaginatedListOfPossibleVerificationMethodDTO {
    pageIndex?: number;
    totalPages?: number;
    hasPreviousPage?: boolean;
    hasNextPage?: boolean;
    totalCount?: number;
    items?: PossibleVerificationMethodDTO[];
}

export class PossibleVerificationMethodDTO implements IPossibleVerificationMethodDTO {
    deviceTypeNumber?: string;
    deviceTypeInfo?: string;
    deviceModifications?: string[];
    verificationTypeNames?: string[];
    dates?: YearMonth[];

    constructor(data?: IPossibleVerificationMethodDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.deviceTypeNumber = _data["deviceTypeNumber"];
            this.deviceTypeInfo = _data["deviceTypeInfo"];
            if (Array.isArray(_data["deviceModifications"])) {
                this.deviceModifications = [] as any;
                for (let item of _data["deviceModifications"])
                    this.deviceModifications!.push(item);
            }
            if (Array.isArray(_data["verificationTypeNames"])) {
                this.verificationTypeNames = [] as any;
                for (let item of _data["verificationTypeNames"])
                    this.verificationTypeNames!.push(item);
            }
            if (Array.isArray(_data["dates"])) {
                this.dates = [] as any;
                for (let item of _data["dates"])
                    this.dates!.push(YearMonth.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PossibleVerificationMethodDTO {
        data = typeof data === 'object' ? data : {};
        let result = new PossibleVerificationMethodDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["deviceTypeNumber"] = this.deviceTypeNumber;
        data["deviceTypeInfo"] = this.deviceTypeInfo;
        if (Array.isArray(this.deviceModifications)) {
            data["deviceModifications"] = [];
            for (let item of this.deviceModifications)
                data["deviceModifications"].push(item);
        }
        if (Array.isArray(this.verificationTypeNames)) {
            data["verificationTypeNames"] = [];
            for (let item of this.verificationTypeNames)
                data["verificationTypeNames"].push(item);
        }
        if (Array.isArray(this.dates)) {
            data["dates"] = [];
            for (let item of this.dates)
                data["dates"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IPossibleVerificationMethodDTO {
    deviceTypeNumber?: string;
    deviceTypeInfo?: string;
    deviceModifications?: string[];
    verificationTypeNames?: string[];
    dates?: YearMonth[];
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}