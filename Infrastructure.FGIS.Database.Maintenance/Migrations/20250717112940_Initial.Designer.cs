// <auto-generated />
using System;
using Infrastructure.FGIS.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.FGIS.Database.Maintenance.Migrations
{
    [DbContext(typeof(FGISDatabase))]
    [Migration("20250717112940_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.DeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Notation")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("notation");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_device_types");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("ix_device_types_number");

                    b.ToTable("device_types", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.DeviceTypeId", b =>
                {
                    b.Property<Guid>("MIT_UUID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("mit_uuid");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("MIT_UUID")
                        .HasName("pk_device_type_ids");

                    b.HasIndex("Number")
                        .IsUnique()
                        .HasDatabaseName("ix_device_type_ids_number");

                    b.ToTable("device_type_ids", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.Etalon", b =>
                {
                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<bool>("Applicability")
                        .HasColumnType("boolean")
                        .HasColumnName("applicability");

                    b.Property<string>("Factory_Num")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("factory_num");

                    b.Property<string>("MiNotation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mi_notation");

                    b.Property<string>("MiType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mi_type");

                    b.Property<string>("MiType_Num")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mi_type_num");

                    b.Property<string>("Modification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modification");

                    b.Property<string>("NpEnumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("np_enumber");

                    b.Property<string>("RankClass")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rank_class");

                    b.Property<string>("RankCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rank_code");

                    b.Property<string>("Schematitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schematitle");

                    b.Property<string>("Schematype")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schematype");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Number")
                        .HasName("pk_etalons");

                    b.ToTable("etalons", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.EtalonsId", b =>
                {
                    b.Property<string>("Rmieta_id")
                        .HasColumnType("text")
                        .HasColumnName("rmieta_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("RegNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reg_number");

                    b.HasKey("Rmieta_id", "Date")
                        .HasName("pk_etalon_ids");

                    b.ToTable("etalon_ids", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.MonthResult", b =>
                {
                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<bool>("DeviceTypeIdsCollected")
                        .HasColumnType("boolean")
                        .HasColumnName("device_type_ids_collected");

                    b.Property<bool>("DeviceTypesCollected")
                        .HasColumnType("boolean")
                        .HasColumnName("device_types_collected");

                    b.Property<bool>("Done")
                        .HasColumnType("boolean")
                        .HasColumnName("done");

                    b.Property<bool>("EtalonsCollected")
                        .HasColumnType("boolean")
                        .HasColumnName("etalons_collected");

                    b.Property<bool>("EtalonsIdsCollected")
                        .HasColumnType("boolean")
                        .HasColumnName("etalons_ids_collected");

                    b.Property<bool>("VerificationIdsCollected")
                        .HasColumnType("boolean")
                        .HasColumnName("verification_ids_collected");

                    b.Property<bool>("VerificationsCollected")
                        .HasColumnType("boolean")
                        .HasColumnName("verifications_collected");

                    b.HasKey("Date")
                        .HasName("pk_month_results");

                    b.ToTable("month_results", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.VerificationId", b =>
                {
                    b.Property<string>("Vri_id")
                        .HasColumnType("text")
                        .HasColumnName("vri_id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("Vri_id")
                        .HasName("pk_verification_ids");

                    b.ToTable("verification_ids", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon", b =>
                {
                    b.Property<string>("Vri_id")
                        .HasColumnType("text")
                        .HasColumnName("vri_id");

                    b.HasKey("Vri_id")
                        .HasName("pk_verifications_with_etalon");

                    b.ToTable("verifications_with_etalon", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.VerificationWithSes", b =>
                {
                    b.Property<string>("Vri_id")
                        .HasColumnType("text")
                        .HasColumnName("vri_id");

                    b.HasKey("Vri_id")
                        .HasName("pk_verifications_witht_ses");

                    b.ToTable("verifications_witht_ses", (string)null);
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.DeviceType", b =>
                {
                    b.OwnsMany("Infrastructure.FGIS.Database.Entities.DeviceType+ManufacturerClass", "Manufacturer", b1 =>
                        {
                            b1.Property<Guid>("DeviceTypeId")
                                .HasColumnType("uuid")
                                .HasColumnName("device_type_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("DeviceTypeId", "Id")
                                .HasName("pk_manufacturer_class");

                            b1.ToTable("manufacturer_class", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DeviceTypeId")
                                .HasConstraintName("fk_manufacturer_class_device_types_device_type_id");
                        });

                    b.OwnsMany("Infrastructure.FGIS.Database.Entities.DeviceType+MethodClass", "Meth", b1 =>
                        {
                            b1.Property<Guid>("DeviceTypeId")
                                .HasColumnType("uuid")
                                .HasColumnName("device_type_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DocUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("doc_url");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("title");

                            b1.HasKey("DeviceTypeId", "Id")
                                .HasName("pk_method_class");

                            b1.ToTable("method_class", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DeviceTypeId")
                                .HasConstraintName("fk_method_class_device_types_device_type_id");
                        });

                    b.OwnsMany("Infrastructure.FGIS.Database.Entities.DeviceType+SpecClass", "Spec", b1 =>
                        {
                            b1.Property<Guid>("DeviceTypeId")
                                .HasColumnType("uuid")
                                .HasColumnName("device_type_id");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("DocUrl")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("doc_url");

                            b1.HasKey("DeviceTypeId", "Id")
                                .HasName("pk_spec_class");

                            b1.ToTable("spec_class", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("DeviceTypeId")
                                .HasConstraintName("fk_spec_class_device_types_device_type_id");
                        });

                    b.Navigation("Manufacturer");

                    b.Navigation("Meth");

                    b.Navigation("Spec");
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.Etalon", b =>
                {
                    b.OwnsMany("Infrastructure.FGIS.Database.Entities.Etalon+EtalonVerificationDocs", "CResults", b1 =>
                        {
                            b1.Property<string>("EtalonNumber")
                                .HasColumnType("text")
                                .HasColumnName("etalon_number");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasColumnName("id");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<bool>("Applicability")
                                .HasColumnType("boolean")
                                .HasColumnName("applicability");

                            b1.Property<string>("Org_Title")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("org_title");

                            b1.Property<string>("Result_Docnum")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("result_docnum");

                            b1.Property<string>("Valid_Date")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("valid_date");

                            b1.Property<string>("Verification_Date")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("verification_date");

                            b1.Property<string>("Vri_Id")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.HasKey("EtalonNumber", "Id")
                                .HasName("pk_etalon_verification_docs");

                            b1.ToTable("etalon_verification_docs", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("EtalonNumber")
                                .HasConstraintName("fk_etalon_verification_docs_etalons_etalon_number");
                        });

                    b.Navigation("CResults");
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon", b =>
                {
                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+InfoClass", "Info", b1 =>
                        {
                            b1.Property<string>("VerificationWithEtalonVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.Property<string>("Additional_Info")
                                .HasColumnType("text")
                                .HasColumnName("info_additional_info");

                            b1.Property<bool>("BriefIndicator")
                                .HasColumnType("boolean")
                                .HasColumnName("info_brief_indicator");

                            b1.HasKey("VerificationWithEtalonVri_id");

                            b1.ToTable("verifications_with_etalon");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithEtalonVri_id")
                                .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");
                        });

                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+MeansClass", "Means", b1 =>
                        {
                            b1.Property<string>("VerificationWithEtalonVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.HasKey("VerificationWithEtalonVri_id");

                            b1.ToTable("verifications_with_etalon");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithEtalonVri_id")
                                .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");

                            b1.OwnsMany("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+Mietum", "Mieta", b2 =>
                                {
                                    b2.Property<string>("MeansClassVerificationWithEtalonVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("means_class_verification_with_etalon_vri_id");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("ManufactureNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("manufacture_num");

                                    b2.Property<int>("ManufactureYear")
                                        .HasColumnType("integer")
                                        .HasColumnName("manufacture_year");

                                    b2.Property<string>("MietaURL")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mieta_url");

                                    b2.Property<string>("MitypeNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mitype_number");

                                    b2.Property<string>("MitypeTitle")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mitype_title");

                                    b2.Property<string>("MitypeURL")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mitype_url");

                                    b2.Property<string>("Modification")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("modification");

                                    b2.Property<string>("Notation")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("notation");

                                    b2.Property<string>("RankCode")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("rank_code");

                                    b2.Property<string>("RankTitle")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("rank_title");

                                    b2.Property<string>("RegNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("reg_number");

                                    b2.Property<string>("SchemaTitle")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("schema_title");

                                    b2.HasKey("MeansClassVerificationWithEtalonVri_id", "Id")
                                        .HasName("pk_mietum");

                                    b2.ToTable("mietum", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("MeansClassVerificationWithEtalonVri_id")
                                        .HasConstraintName("fk_mietum_verifications_with_etalon_means_class_verification_w");
                                });

                            b1.Navigation("Mieta");
                        });

                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+MiInfoClass", "MiInfo", b1 =>
                        {
                            b1.Property<string>("VerificationWithEtalonVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.HasKey("VerificationWithEtalonVri_id");

                            b1.ToTable("verifications_with_etalon");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithEtalonVri_id")
                                .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");

                            b1.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+SingleMI", "SingleMI", b2 =>
                                {
                                    b2.Property<string>("MiInfoClassVerificationWithEtalonVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("vri_id");

                                    b2.Property<string>("ManufactureNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_manufacture_num");

                                    b2.Property<int>("ManufactureYear")
                                        .HasColumnType("integer")
                                        .HasColumnName("mi_info_single_mi_manufacture_year");

                                    b2.Property<string>("MitypeNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_number");

                                    b2.Property<string>("MitypeTitle")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_title");

                                    b2.Property<string>("MitypeType")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_type");

                                    b2.Property<string>("MitypeURL")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_url");

                                    b2.Property<string>("Modification")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_modification");

                                    b2.HasKey("MiInfoClassVerificationWithEtalonVri_id");

                                    b2.ToTable("verifications_with_etalon");

                                    b2.WithOwner()
                                        .HasForeignKey("MiInfoClassVerificationWithEtalonVri_id")
                                        .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");
                                });

                            b1.Navigation("SingleMI")
                                .IsRequired();
                        });

                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+VriInfoClass", "VriInfo", b1 =>
                        {
                            b1.Property<string>("VerificationWithEtalonVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.Property<string>("DocTitle")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_doc_title");

                            b1.Property<string>("MiOwner")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_mi_owner");

                            b1.Property<string>("Organization")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_organization");

                            b1.Property<string>("SignCipher")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_sign_cipher");

                            b1.Property<DateOnly?>("ValidDate")
                                .HasColumnType("date")
                                .HasColumnName("vri_info_valid_date");

                            b1.Property<DateOnly>("VrfDate")
                                .HasColumnType("date")
                                .HasColumnName("vri_info_vrf_date");

                            b1.Property<string>("VriType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_vri_type");

                            b1.HasKey("VerificationWithEtalonVri_id");

                            b1.ToTable("verifications_with_etalon");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithEtalonVri_id")
                                .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");

                            b1.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+Applicable", "Applicable", b2 =>
                                {
                                    b2.Property<string>("VriInfoClassVerificationWithEtalonVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("vri_id");

                                    b2.Property<string>("CertNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("vri_info_applicable_cert_num");

                                    b2.Property<bool>("SignMi")
                                        .HasColumnType("boolean")
                                        .HasColumnName("vri_info_applicable_sign_mi");

                                    b2.Property<bool>("SignPass")
                                        .HasColumnType("boolean")
                                        .HasColumnName("vri_info_applicable_sign_pass");

                                    b2.HasKey("VriInfoClassVerificationWithEtalonVri_id");

                                    b2.ToTable("verifications_with_etalon");

                                    b2.WithOwner()
                                        .HasForeignKey("VriInfoClassVerificationWithEtalonVri_id")
                                        .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");
                                });

                            b1.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithEtalon+Inapplicable", "Inapplicable", b2 =>
                                {
                                    b2.Property<string>("VriInfoClassVerificationWithEtalonVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("vri_id");

                                    b2.Property<string>("NoticeNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("vri_info_inapplicable_notice_num");

                                    b2.HasKey("VriInfoClassVerificationWithEtalonVri_id");

                                    b2.ToTable("verifications_with_etalon");

                                    b2.WithOwner()
                                        .HasForeignKey("VriInfoClassVerificationWithEtalonVri_id")
                                        .HasConstraintName("fk_verifications_with_etalon_verifications_with_etalon_vri_id");
                                });

                            b1.Navigation("Applicable");

                            b1.Navigation("Inapplicable");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Means")
                        .IsRequired();

                    b.Navigation("MiInfo")
                        .IsRequired();

                    b.Navigation("VriInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Infrastructure.FGIS.Database.Entities.VerificationWithSes", b =>
                {
                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+InfoClass", "Info", b1 =>
                        {
                            b1.Property<string>("VerificationWithSesVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.Property<string>("Additional_Info")
                                .HasColumnType("text")
                                .HasColumnName("info_additional_info");

                            b1.Property<bool>("BriefIndicator")
                                .HasColumnType("boolean")
                                .HasColumnName("info_brief_indicator");

                            b1.HasKey("VerificationWithSesVri_id");

                            b1.ToTable("verifications_witht_ses");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithSesVri_id")
                                .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");
                        });

                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+MeansClass", "Means", b1 =>
                        {
                            b1.Property<string>("VerificationWithSesVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.HasKey("VerificationWithSesVri_id");

                            b1.ToTable("verifications_witht_ses");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithSesVri_id")
                                .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");

                            b1.OwnsMany("Infrastructure.FGIS.Database.Entities.VerificationWithSes+Sample", "Ses", b2 =>
                                {
                                    b2.Property<string>("MeansClassVerificationWithSesVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("means_class_verification_with_ses_vri_id");

                                    b2.Property<int>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("integer")
                                        .HasColumnName("id");

                                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b2.Property<int>("Id"));

                                    b2.Property<string>("ManufactureYear")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("manufacture_year");

                                    b2.Property<string>("Number")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("number");

                                    b2.Property<string>("SeURL")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("se_url");

                                    b2.Property<string>("Title")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("title");

                                    b2.HasKey("MeansClassVerificationWithSesVri_id", "Id")
                                        .HasName("pk_sample");

                                    b2.ToTable("sample", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("MeansClassVerificationWithSesVri_id")
                                        .HasConstraintName("fk_sample_verifications_witht_ses_means_class_verification_wit");
                                });

                            b1.Navigation("Ses");
                        });

                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+MiInfoClass", "MiInfo", b1 =>
                        {
                            b1.Property<string>("VerificationWithSesVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.HasKey("VerificationWithSesVri_id");

                            b1.ToTable("verifications_witht_ses");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithSesVri_id")
                                .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");

                            b1.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+SingleMI", "SingleMI", b2 =>
                                {
                                    b2.Property<string>("MiInfoClassVerificationWithSesVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("vri_id");

                                    b2.Property<string>("ManufactureNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_manufacture_num");

                                    b2.Property<int>("ManufactureYear")
                                        .HasColumnType("integer")
                                        .HasColumnName("mi_info_single_mi_manufacture_year");

                                    b2.Property<string>("MitypeNumber")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_number");

                                    b2.Property<string>("MitypeTitle")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_title");

                                    b2.Property<string>("MitypeType")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_type");

                                    b2.Property<string>("MitypeURL")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_mitype_url");

                                    b2.Property<string>("Modification")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("mi_info_single_mi_modification");

                                    b2.HasKey("MiInfoClassVerificationWithSesVri_id");

                                    b2.ToTable("verifications_witht_ses");

                                    b2.WithOwner()
                                        .HasForeignKey("MiInfoClassVerificationWithSesVri_id")
                                        .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");
                                });

                            b1.Navigation("SingleMI")
                                .IsRequired();
                        });

                    b.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+VriInfoClass", "VriInfo", b1 =>
                        {
                            b1.Property<string>("VerificationWithSesVri_id")
                                .HasColumnType("text")
                                .HasColumnName("vri_id");

                            b1.Property<string>("DocTitle")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_doc_title");

                            b1.Property<string>("MiOwner")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_mi_owner");

                            b1.Property<string>("Organization")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_organization");

                            b1.Property<string>("SignCipher")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_sign_cipher");

                            b1.Property<DateOnly?>("ValidDate")
                                .HasColumnType("date")
                                .HasColumnName("vri_info_valid_date");

                            b1.Property<DateOnly>("VrfDate")
                                .HasColumnType("date")
                                .HasColumnName("vri_info_vrf_date");

                            b1.Property<string>("VriType")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("vri_info_vri_type");

                            b1.HasKey("VerificationWithSesVri_id");

                            b1.ToTable("verifications_witht_ses");

                            b1.WithOwner()
                                .HasForeignKey("VerificationWithSesVri_id")
                                .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");

                            b1.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+Applicable", "Applicable", b2 =>
                                {
                                    b2.Property<string>("VriInfoClassVerificationWithSesVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("vri_id");

                                    b2.Property<string>("CertNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("vri_info_applicable_cert_num");

                                    b2.Property<bool>("SignMi")
                                        .HasColumnType("boolean")
                                        .HasColumnName("vri_info_applicable_sign_mi");

                                    b2.Property<bool>("SignPass")
                                        .HasColumnType("boolean")
                                        .HasColumnName("vri_info_applicable_sign_pass");

                                    b2.HasKey("VriInfoClassVerificationWithSesVri_id");

                                    b2.ToTable("verifications_witht_ses");

                                    b2.WithOwner()
                                        .HasForeignKey("VriInfoClassVerificationWithSesVri_id")
                                        .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");
                                });

                            b1.OwnsOne("Infrastructure.FGIS.Database.Entities.VerificationWithSes+Inapplicable", "Inapplicable", b2 =>
                                {
                                    b2.Property<string>("VriInfoClassVerificationWithSesVri_id")
                                        .HasColumnType("text")
                                        .HasColumnName("vri_id");

                                    b2.Property<string>("NoticeNum")
                                        .IsRequired()
                                        .HasColumnType("text")
                                        .HasColumnName("vri_info_inapplicable_notice_num");

                                    b2.HasKey("VriInfoClassVerificationWithSesVri_id");

                                    b2.ToTable("verifications_witht_ses");

                                    b2.WithOwner()
                                        .HasForeignKey("VriInfoClassVerificationWithSesVri_id")
                                        .HasConstraintName("fk_verifications_witht_ses_verifications_witht_ses_vri_id");
                                });

                            b1.Navigation("Applicable");

                            b1.Navigation("Inapplicable");
                        });

                    b.Navigation("Info")
                        .IsRequired();

                    b.Navigation("Means")
                        .IsRequired();

                    b.Navigation("MiInfo")
                        .IsRequired();

                    b.Navigation("VriInfo")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
