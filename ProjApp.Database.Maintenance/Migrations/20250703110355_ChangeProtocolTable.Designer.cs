// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjApp.Database;

#nullable disable

namespace ProjApp.Database.Maintenance.Migrations
{
    [DbContext(typeof(ProjDatabase))]
    [Migration("20250703110355_ChangeProtocolTable")]
    partial class ChangeProtocolTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EtalonInitialVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("InitialVerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("initial_verifications_id");

                    b.HasKey("EtalonsId", "InitialVerificationsId")
                        .HasName("pk_etalon_initial_verification");

                    b.HasIndex("InitialVerificationsId")
                        .HasDatabaseName("ix_etalon_initial_verification_initial_verifications_id");

                    b.ToTable("etalon_initial_verification", (string)null);
                });

            modelBuilder.Entity("EtalonInitialVerificationFailed", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("InitialVerificationsFailedId")
                        .HasColumnType("uuid")
                        .HasColumnName("initial_verifications_failed_id");

                    b.HasKey("EtalonsId", "InitialVerificationsFailedId")
                        .HasName("pk_etalon_initial_verification_failed");

                    b.HasIndex("InitialVerificationsFailedId")
                        .HasDatabaseName("ix_etalon_initial_verification_failed_initial_verifications_fa");

                    b.ToTable("etalon_initial_verification_failed", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.CompleteVerificationFail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ProtocolTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_template_id");

                    b.HasKey("Id")
                        .HasName("pk_complete_verification_fails");

                    b.HasIndex("ProtocolTemplateId")
                        .HasDatabaseName("ix_complete_verification_fails_protocol_template_id");

                    b.ToTable("complete_verification_fails", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.CompleteVerificationSuccess", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("ProtocolTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_template_id");

                    b.HasKey("Id")
                        .HasName("pk_complete_verification_successes");

                    b.HasIndex("ProtocolTemplateId")
                        .HasDatabaseName("ix_complete_verification_successes_protocol_template_id");

                    b.ToTable("complete_verification_successes", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DeviceTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_type_id");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<long>("ManufacturedYear")
                        .HasColumnType("bigint")
                        .HasColumnName("manufactured_year");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("DeviceTypeId")
                        .HasDatabaseName("ix_devices_device_type_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.DeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Notation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notation");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_device_types");

                    b.ToTable("device_types", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Etalon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("FullInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_info");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("Id")
                        .HasName("pk_etalons");

                    b.ToTable("etalons", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<string>("VerificationTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_name");

                    b.Property<DateOnly>("VerifiedUntilDate")
                        .HasColumnType("date")
                        .HasColumnName("verified_until_date");

                    b.HasKey("Id")
                        .HasName("pk_initial_verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_initial_verifications_device_id");

                    b.ToTable("initial_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerificationFailed", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("FailedDocNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_doc_number");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<string>("VerificationTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_name");

                    b.HasKey("Id")
                        .HasName("pk_failed_initial_verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_failed_initial_verifications_device_id");

                    b.ToTable("failed_initial_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerificationJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("Id")
                        .HasName("pk_initial_verification_jobs");

                    b.ToTable("initial_verification_jobs", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.PendingManometrVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("accuracy");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.PrimitiveCollection<string[]>("EtalonsNumbers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("etalons_numbers");

                    b.Property<double>("Hummidity")
                        .HasColumnType("double precision")
                        .HasColumnName("hummidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_name");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.PrimitiveCollection<string[]>("VerificationMethods")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("verification_methods");

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker_name");

                    b.HasKey("Id")
                        .HasName("pk_pending_manometr_verifications");

                    b.ToTable("pending_manometr_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.ProtocolTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Checkups")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkups");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("values");

                    b.HasKey("Id")
                        .HasName("pk_protocol_templates");

                    b.ToTable("protocol_templates", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Aliases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("aliases");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<byte[]>("FileContent")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("file_content");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("Id")
                        .HasName("pk_verification_methods");

                    b.ToTable("verification_methods", (string)null);
                });

            modelBuilder.Entity("ProtocolTemplateVerificationMethod", b =>
                {
                    b.Property<Guid>("ProtocolTemplatesId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_templates_id");

                    b.Property<Guid>("VerificationMethodsId")
                        .HasColumnType("uuid")
                        .HasColumnName("verification_methods_id");

                    b.HasKey("ProtocolTemplatesId", "VerificationMethodsId")
                        .HasName("pk_protocol_template_verification_method");

                    b.HasIndex("VerificationMethodsId")
                        .HasDatabaseName("ix_protocol_template_verification_method_verification_methods_");

                    b.ToTable("protocol_template_verification_method", (string)null);
                });

            modelBuilder.Entity("EtalonInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_initial_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.InitialVerification", null)
                        .WithMany()
                        .HasForeignKey("InitialVerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_initial_verification_initial_verifications_initial_v");
                });

            modelBuilder.Entity("EtalonInitialVerificationFailed", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_initial_verification_failed_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.InitialVerificationFailed", null)
                        .WithMany()
                        .HasForeignKey("InitialVerificationsFailedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_initial_verification_failed_failed_initial_verificat");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.CompleteVerificationFail", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany("CompleteFailVerifications")
                        .HasForeignKey("ProtocolTemplateId")
                        .HasConstraintName("fk_complete_verification_fails_protocol_templates_protocol_tem");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.CompleteVerificationSuccess", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany("CompleteSuccessVerifications")
                        .HasForeignKey("ProtocolTemplateId")
                        .HasConstraintName("fk_complete_verification_successes_protocol_templates_protocol");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Device", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .HasConstraintName("fk_devices_device_types_device_type_id");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_initial_verifications_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerificationFailed", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_failed_initial_verifications_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProtocolTemplateVerificationMethod", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProtocolTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_protocol_template_verification_method_protocol_templates_pr");

                    b.HasOne("ProjApp.Database.Entities.VerificationMethod", null)
                        .WithMany()
                        .HasForeignKey("VerificationMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_protocol_template_verification_method_verification_methods_");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.ProtocolTemplate", b =>
                {
                    b.Navigation("CompleteFailVerifications");

                    b.Navigation("CompleteSuccessVerifications");
                });
#pragma warning restore 612, 618
        }
    }
}
