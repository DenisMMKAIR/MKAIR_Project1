// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjApp.Database;

#nullable disable

namespace ProjApp.Database.Maintenance.Migrations
{
    [DbContext(typeof(ProjDatabase))]
    partial class ProjDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EtalonFailedInitialVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("FailedInitialVerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("failed_initial_verifications_id");

                    b.HasKey("EtalonsId", "FailedInitialVerificationsId")
                        .HasName("pk_etalon_failed_initial_verification");

                    b.HasIndex("FailedInitialVerificationsId")
                        .HasDatabaseName("ix_etalon_failed_initial_verification_failed_initial_verificat");

                    b.ToTable("etalon_failed_initial_verification", (string)null);
                });

            modelBuilder.Entity("EtalonFailedVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("FailedVerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("failed_verifications_id");

                    b.HasKey("EtalonsId", "FailedVerificationsId")
                        .HasName("pk_etalon_failed_verification");

                    b.HasIndex("FailedVerificationsId")
                        .HasDatabaseName("ix_etalon_failed_verification_failed_verifications_id");

                    b.ToTable("etalon_failed_verification", (string)null);
                });

            modelBuilder.Entity("EtalonManometr1Verification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("Manometr1VerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("manometr1verifications_id");

                    b.HasKey("EtalonsId", "Manometr1VerificationsId")
                        .HasName("pk_etalon_manometr1verification");

                    b.HasIndex("Manometr1VerificationsId")
                        .HasDatabaseName("ix_etalon_manometr1verification_manometr1verifications_id");

                    b.ToTable("etalon_manometr1verification", (string)null);
                });

            modelBuilder.Entity("EtalonSuccessInitialVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("SuccessInitialVerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("success_initial_verifications_id");

                    b.HasKey("EtalonsId", "SuccessInitialVerificationsId")
                        .HasName("pk_etalon_success_initial_verification");

                    b.HasIndex("SuccessInitialVerificationsId")
                        .HasDatabaseName("ix_etalon_success_initial_verification_success_initial_verific");

                    b.ToTable("etalon_success_initial_verification", (string)null);
                });

            modelBuilder.Entity("EtalonSuccessVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("SuccessVerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("success_verifications_id");

                    b.HasKey("EtalonsId", "SuccessVerificationsId")
                        .HasName("pk_etalon_success_verification");

                    b.HasIndex("SuccessVerificationsId")
                        .HasDatabaseName("ix_etalon_success_verification_success_verifications_id");

                    b.ToTable("etalon_success_verification", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DeviceTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_type_id");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<long>("ManufacturedYear")
                        .HasColumnType("bigint")
                        .HasColumnName("manufactured_year");

                    b.Property<string>("Modification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modification");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("DeviceTypeId")
                        .HasDatabaseName("ix_devices_device_type_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.DeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Notation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notation");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_device_types");

                    b.ToTable("device_types", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Etalon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("FullInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_info");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("Id")
                        .HasName("pk_etalons");

                    b.ToTable("etalons", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedInitialVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("FailedDocNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_doc_number");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int?>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal?>("OwnerINN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnType("text")
                        .HasColumnName("protocol_number");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<int?>("VerificationGroup")
                        .HasColumnType("integer")
                        .HasColumnName("verification_group");

                    b.Property<string>("VerificationTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_name");

                    b.Property<string>("Worker")
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_failed_initial_verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_failed_initial_verifications_device_id");

                    b.ToTable("failed_initial_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("FailedDocNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_doc_number");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("OwnerINN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<string>("ProtocolNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("protocol_number");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<int>("VerificationGroup")
                        .HasColumnType("integer")
                        .HasColumnName("verification_group");

                    b.Property<string>("VerificationTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_name");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_failed_verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_failed_verifications_device_id");

                    b.ToTable("failed_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerificationJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("Id")
                        .HasName("pk_initial_verification_jobs");

                    b.ToTable("initial_verification_jobs", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Manometr1Verification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActualError")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actual_error");

                    b.PrimitiveCollection<double[]>("ActualVariation")
                        .IsRequired()
                        .HasColumnType("double precision[]")
                        .HasColumnName("actual_variation");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceModification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_modification");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_name");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("DeviceValues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_values");

                    b.Property<string>("EtalonValues")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etalon_values");

                    b.Property<string>("EtalonsInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("etalons_info");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<long>("ManufactureYear")
                        .HasColumnType("bigint")
                        .HasColumnName("manufacture_year");

                    b.Property<double>("MeasurementMax")
                        .HasColumnType("double precision")
                        .HasColumnName("measurement_max");

                    b.Property<double>("MeasurementMin")
                        .HasColumnType("double precision")
                        .HasColumnName("measurement_min");

                    b.Property<string>("MeasurementUnit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("measurement_unit");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("OwnerINN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<string>("ProtocolNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("protocol_number");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<double>("ValidError")
                        .HasColumnType("double precision")
                        .HasColumnName("valid_error");

                    b.Property<string>("VerificationAccuracyCheckup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_accuracy_checkup");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<int>("VerificationGroup")
                        .HasColumnType("integer")
                        .HasColumnName("verification_group");

                    b.Property<Guid?>("VerificationMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("verification_method_id");

                    b.Property<string>("VerificationResultCheckup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_result_checkup");

                    b.Property<string>("VerificationVisualCheckup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_visual_checkup");

                    b.Property<string>("VerificationsInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verifications_info");

                    b.Property<DateOnly>("VerifiedUntilDate")
                        .HasColumnType("date")
                        .HasColumnName("verified_until_date");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_manometr1verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_manometr1verifications_device_id");

                    b.HasIndex("VerificationMethodId")
                        .HasDatabaseName("ix_manometr1verifications_verification_method_id");

                    b.ToTable("manometr1verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("INN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("inn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_owners");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.ProtocolTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("ProtocolGroup")
                        .HasColumnType("integer")
                        .HasColumnName("protocol_group");

                    b.Property<int>("VerificationGroup")
                        .HasColumnType("integer")
                        .HasColumnName("verification_group");

                    b.HasKey("Id")
                        .HasName("pk_protocol_templates");

                    b.ToTable("protocol_templates", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessInitialVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int?>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal?>("OwnerINN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<string>("ProtocolNumber")
                        .HasColumnType("text")
                        .HasColumnName("protocol_number");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<int?>("VerificationGroup")
                        .HasColumnType("integer")
                        .HasColumnName("verification_group");

                    b.Property<string>("VerificationTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_name");

                    b.Property<DateOnly>("VerifiedUntilDate")
                        .HasColumnType("date")
                        .HasColumnName("verified_until_date");

                    b.Property<string>("Worker")
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_success_initial_verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_success_initial_verifications_device_id");

                    b.ToTable("success_initial_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("OwnerINN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<string>("ProtocolNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("protocol_number");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.Property<int>("VerificationGroup")
                        .HasColumnType("integer")
                        .HasColumnName("verification_group");

                    b.Property<string>("VerificationTypeName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_name");

                    b.Property<DateOnly>("VerifiedUntilDate")
                        .HasColumnType("date")
                        .HasColumnName("verified_until_date");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_success_verifications");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_success_verifications_device_id");

                    b.ToTable("success_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Aliases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("aliases");

                    b.Property<string>("Checkups")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkups");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid?>("ProtocolTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_template_id");

                    b.HasKey("Id")
                        .HasName("pk_verification_methods");

                    b.HasIndex("ProtocolTemplateId")
                        .HasDatabaseName("ix_verification_methods_protocol_template_id");

                    b.ToTable("verification_methods", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethodFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Mimetype")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<Guid?>("VerificationMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("verification_method_id");

                    b.HasKey("Id")
                        .HasName("pk_verification_method_files");

                    b.HasIndex("VerificationMethodId")
                        .HasDatabaseName("ix_verification_method_files_verification_method_id");

                    b.ToTable("verification_method_files", (string)null);
                });

            modelBuilder.Entity("EtalonFailedInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_failed_initial_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.FailedInitialVerification", null)
                        .WithMany()
                        .HasForeignKey("FailedInitialVerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_failed_initial_verification_failed_initial_verificat");
                });

            modelBuilder.Entity("EtalonFailedVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_failed_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.FailedVerification", null)
                        .WithMany()
                        .HasForeignKey("FailedVerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_failed_verification_failed_verifications_failed_veri");
                });

            modelBuilder.Entity("EtalonManometr1Verification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_manometr1verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.Manometr1Verification", null)
                        .WithMany()
                        .HasForeignKey("Manometr1VerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_manometr1verification_manometr1verifications_manomet");
                });

            modelBuilder.Entity("EtalonSuccessInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_success_initial_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.SuccessInitialVerification", null)
                        .WithMany()
                        .HasForeignKey("SuccessInitialVerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_success_initial_verification_success_initial_verific");
                });

            modelBuilder.Entity("EtalonSuccessVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_success_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.SuccessVerification", null)
                        .WithMany()
                        .HasForeignKey("SuccessVerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_success_verification_success_verifications_success_v");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Device", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .HasConstraintName("fk_devices_device_types_device_type_id");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_failed_initial_verifications_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_failed_verifications_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Manometr1Verification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_manometr1verifications_devices_device_id");

                    b.HasOne("ProjApp.Database.Entities.VerificationMethod", "VerificationMethod")
                        .WithMany()
                        .HasForeignKey("VerificationMethodId")
                        .HasConstraintName("fk_manometr1verifications_verification_methods_verification_me");

                    b.Navigation("Device");

                    b.Navigation("VerificationMethod");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_success_initial_verifications_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_success_verifications_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethod", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany("VerificationMethods")
                        .HasForeignKey("ProtocolTemplateId")
                        .HasConstraintName("fk_verification_methods_protocol_templates_protocol_template_id");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethodFile", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.VerificationMethod", null)
                        .WithMany("VerificationMethodFiles")
                        .HasForeignKey("VerificationMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_verification_method_files_verification_methods_verification");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.ProtocolTemplate", b =>
                {
                    b.Navigation("VerificationMethods");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethod", b =>
                {
                    b.Navigation("VerificationMethodFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
