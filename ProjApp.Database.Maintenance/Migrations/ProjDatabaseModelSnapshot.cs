// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjApp.Database;

#nullable disable

namespace ProjApp.Database.Maintenance.Migrations
{
    [DbContext(typeof(ProjDatabase))]
    partial class ProjDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EtalonFailedInitialVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("InitialVerificationsFailedId")
                        .HasColumnType("uuid")
                        .HasColumnName("initial_verifications_failed_id");

                    b.HasKey("EtalonsId", "InitialVerificationsFailedId")
                        .HasName("pk_etalon_failed_initial_verification");

                    b.HasIndex("InitialVerificationsFailedId")
                        .HasDatabaseName("ix_etalon_failed_initial_verification_initial_verifications_fa");

                    b.ToTable("etalon_failed_initial_verification", (string)null);
                });

            modelBuilder.Entity("EtalonSuccessInitialVerification", b =>
                {
                    b.Property<Guid>("EtalonsId")
                        .HasColumnType("uuid")
                        .HasColumnName("etalons_id");

                    b.Property<Guid>("InitialVerificationsId")
                        .HasColumnType("uuid")
                        .HasColumnName("initial_verifications_id");

                    b.HasKey("EtalonsId", "InitialVerificationsId")
                        .HasName("pk_etalon_success_initial_verification");

                    b.HasIndex("InitialVerificationsId")
                        .HasDatabaseName("ix_etalon_success_initial_verification_initial_verifications_id");

                    b.ToTable("etalon_success_initial_verification", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("DeviceTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_type_id");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<long>("ManufacturedYear")
                        .HasColumnType("bigint")
                        .HasColumnName("manufactured_year");

                    b.Property<string>("Modification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("modification");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("serial");

                    b.HasKey("Id")
                        .HasName("pk_devices");

                    b.HasIndex("DeviceTypeId")
                        .HasDatabaseName("ix_devices_device_type_id");

                    b.ToTable("devices", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.DeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Notation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notation");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_device_types");

                    b.ToTable("device_types", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Etalon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<Guid?>("FailedVerificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("failed_verification_id");

                    b.Property<string>("FullInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_info");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<Guid?>("SuccessVerificationId")
                        .HasColumnType("uuid")
                        .HasColumnName("success_verification_id");

                    b.Property<DateOnly>("ToDate")
                        .HasColumnType("date")
                        .HasColumnName("to_date");

                    b.HasKey("Id")
                        .HasName("pk_etalons");

                    b.HasIndex("FailedVerificationId")
                        .HasDatabaseName("ix_etalons_failed_verification_id");

                    b.HasIndex("SuccessVerificationId")
                        .HasDatabaseName("ix_etalons_success_verification_id");

                    b.ToTable("etalons", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedInitialVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("FailedDocNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_doc_number");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int?>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal?>("OwnerInn")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<Guid?>("ProtocolTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_template_id");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.PrimitiveCollection<string[]>("VerificationTypeNames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("verification_type_names");

                    b.Property<string>("VerificationTypeNum")
                        .HasColumnType("text")
                        .HasColumnName("verification_type_num");

                    b.Property<string>("Worker")
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_initial_verifications_failed");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_initial_verifications_failed_device_id");

                    b.HasIndex("ProtocolTemplateId")
                        .HasDatabaseName("ix_initial_verifications_failed_protocol_template_id");

                    b.ToTable("initial_verifications_failed", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<string>("FailedDocNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("failed_doc_number");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("OwnerInn")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.PrimitiveCollection<string[]>("VerificationTypeNames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("verification_type_names");

                    b.Property<string>("VerificationTypeNum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_num");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_verifications_failed");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_verifications_failed_device_id");

                    b.ToTable("verifications_failed", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.InitialVerificationJob", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.HasKey("Id")
                        .HasName("pk_initial_verification_jobs");

                    b.ToTable("initial_verification_jobs", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Owner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("INN")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("inn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_owners");

                    b.ToTable("owners", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.PendingManometrVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<double?>("Accuracy")
                        .HasColumnType("double precision")
                        .HasColumnName("accuracy");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.PrimitiveCollection<string[]>("EtalonsNumbers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("etalons_numbers");

                    b.Property<double>("Hummidity")
                        .HasColumnType("double precision")
                        .HasColumnName("hummidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_name");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.PrimitiveCollection<string[]>("VerificationMethods")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("verification_methods");

                    b.Property<string>("WorkerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker_name");

                    b.HasKey("Id")
                        .HasName("pk_pending_manometr_verifications");

                    b.ToTable("pending_manometr_verifications", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.ProtocolTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Checkups")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("checkups");

                    b.PrimitiveCollection<string[]>("DeviceTypeNumbers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("device_type_numbers");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("group");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("values");

                    b.HasKey("Id")
                        .HasName("pk_protocol_templates");

                    b.ToTable("protocol_templates", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessInitialVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int?>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal?>("OwnerInn")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<Guid?>("ProtocolTemplateId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_template_id");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.PrimitiveCollection<string[]>("VerificationTypeNames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("verification_type_names");

                    b.Property<string>("VerificationTypeNum")
                        .HasColumnType("text")
                        .HasColumnName("verification_type_num");

                    b.Property<DateOnly>("VerifiedUntilDate")
                        .HasColumnType("date")
                        .HasColumnName("verified_until_date");

                    b.Property<string>("Worker")
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_initial_verifications_success");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_initial_verifications_success_device_id");

                    b.HasIndex("ProtocolTemplateId")
                        .HasDatabaseName("ix_initial_verifications_success_protocol_template_id");

                    b.ToTable("initial_verifications_success", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("additional_info");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("uuid")
                        .HasColumnName("device_id");

                    b.Property<string>("DeviceSerial")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_serial");

                    b.Property<string>("DeviceTypeNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("device_type_number");

                    b.Property<double>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<int>("Location")
                        .HasColumnType("integer")
                        .HasColumnName("location");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner");

                    b.Property<decimal>("OwnerInn")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("owner_inn");

                    b.Property<string>("Pressure")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pressure");

                    b.Property<double>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.Property<DateOnly>("VerificationDate")
                        .HasColumnType("date")
                        .HasColumnName("verification_date");

                    b.PrimitiveCollection<string[]>("VerificationTypeNames")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("verification_type_names");

                    b.Property<string>("VerificationTypeNum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("verification_type_num");

                    b.Property<DateOnly>("VerifiedUntilDate")
                        .HasColumnType("date")
                        .HasColumnName("verified_until_date");

                    b.Property<string>("Worker")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("worker");

                    b.HasKey("Id")
                        .HasName("pk_verifications_success");

                    b.HasIndex("DeviceId")
                        .HasDatabaseName("ix_verifications_success_device_id");

                    b.ToTable("verifications_success", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<string[]>("Aliases")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("aliases");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_verification_methods");

                    b.ToTable("verification_methods", (string)null);
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethodFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.Property<string>("Mimetype")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mimetype");

                    b.Property<Guid?>("VerificationMethodId")
                        .HasColumnType("uuid")
                        .HasColumnName("verification_method_id");

                    b.HasKey("Id")
                        .HasName("pk_verification_method_files");

                    b.HasIndex("VerificationMethodId")
                        .HasDatabaseName("ix_verification_method_files_verification_method_id");

                    b.ToTable("verification_method_files", (string)null);
                });

            modelBuilder.Entity("ProtocolTemplateVerificationMethod", b =>
                {
                    b.Property<Guid>("ProtocolTemplatesId")
                        .HasColumnType("uuid")
                        .HasColumnName("protocol_templates_id");

                    b.Property<Guid>("VerificationMethodsId")
                        .HasColumnType("uuid")
                        .HasColumnName("verification_methods_id");

                    b.HasKey("ProtocolTemplatesId", "VerificationMethodsId")
                        .HasName("pk_protocol_template_verification_method");

                    b.HasIndex("VerificationMethodsId")
                        .HasDatabaseName("ix_protocol_template_verification_method_verification_methods_");

                    b.ToTable("protocol_template_verification_method", (string)null);
                });

            modelBuilder.Entity("EtalonFailedInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_failed_initial_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.FailedInitialVerification", null)
                        .WithMany()
                        .HasForeignKey("InitialVerificationsFailedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_failed_initial_verification_initial_verifications_fa");
                });

            modelBuilder.Entity("EtalonSuccessInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Etalon", null)
                        .WithMany()
                        .HasForeignKey("EtalonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_success_initial_verification_etalons_etalons_id");

                    b.HasOne("ProjApp.Database.Entities.SuccessInitialVerification", null)
                        .WithMany()
                        .HasForeignKey("InitialVerificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_etalon_success_initial_verification_initial_verifications_s");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Device", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.DeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId")
                        .HasConstraintName("fk_devices_device_types_device_type_id");

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.Etalon", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.FailedVerification", null)
                        .WithMany("Etalons")
                        .HasForeignKey("FailedVerificationId")
                        .HasConstraintName("fk_etalons_verifications_failed_failed_verification_id");

                    b.HasOne("ProjApp.Database.Entities.SuccessVerification", null)
                        .WithMany("Etalons")
                        .HasForeignKey("SuccessVerificationId")
                        .HasConstraintName("fk_etalons_verifications_success_success_verification_id");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_initial_verifications_failed_devices_device_id");

                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany("CompleteFailVerifications")
                        .HasForeignKey("ProtocolTemplateId")
                        .HasConstraintName("fk_initial_verifications_failed_protocol_templates_protocol_te");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_verifications_failed_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessInitialVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_initial_verifications_success_devices_device_id");

                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany("CompleteSuccessVerifications")
                        .HasForeignKey("ProtocolTemplateId")
                        .HasConstraintName("fk_initial_verifications_success_protocol_templates_protocol_t");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessVerification", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .HasConstraintName("fk_verifications_success_devices_device_id");

                    b.Navigation("Device");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethodFile", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.VerificationMethod", null)
                        .WithMany("VerificationMethodFiles")
                        .HasForeignKey("VerificationMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_verification_method_files_verification_methods_verification");
                });

            modelBuilder.Entity("ProtocolTemplateVerificationMethod", b =>
                {
                    b.HasOne("ProjApp.Database.Entities.ProtocolTemplate", null)
                        .WithMany()
                        .HasForeignKey("ProtocolTemplatesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_protocol_template_verification_method_protocol_templates_pr");

                    b.HasOne("ProjApp.Database.Entities.VerificationMethod", null)
                        .WithMany()
                        .HasForeignKey("VerificationMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_protocol_template_verification_method_verification_methods_");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.FailedVerification", b =>
                {
                    b.Navigation("Etalons");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.ProtocolTemplate", b =>
                {
                    b.Navigation("CompleteFailVerifications");

                    b.Navigation("CompleteSuccessVerifications");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.SuccessVerification", b =>
                {
                    b.Navigation("Etalons");
                });

            modelBuilder.Entity("ProjApp.Database.Entities.VerificationMethod", b =>
                {
                    b.Navigation("VerificationMethodFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
